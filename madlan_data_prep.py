# -*- coding: utf-8 -*-
"""madlan_data_prep.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_nvaHFhbc7QHiZDwF126kKnRSheHf36u
"""

import re
import numpy as np
import pandas as pd
import datetime
import string

def prepare_data(data):
    df = data.copy()
    df['price'] = df['price'].apply(lambda x: re.findall(r'\d+\.?\d*', str(x)))
    df['price'] = df['price'].apply(lambda x: ''.join(x) if len(x) > 0 else np.nan).astype(float)

    df['Area'] = df['Area'].apply(lambda x: re.findall(r'\d+\.?\d*', str(x)))
    df['Area'] = df['Area'].apply(lambda x: ''.join(x) if len(x) > 0 else np.nan).astype(float)

    df.dropna(subset=['price'], inplace=True)

    df['Street'] = df['Street'].str.replace('[,\\.]', '', regex=True)
    df['city_area'] = df['city_area'].str.replace('[,\\.]', '', regex=True)
    df['City'] = df['City'].str.replace('[,\\.]', '', regex=True)
    df['City'] = df['City'].str.replace('יי', 'י')
    df['description '] = df['description '].str.replace('[,\\.]', '', regex=True)
    df['description '] = df['description '].fillna('').apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)) if isinstance(x, str) else x)


    df['floor_out_of'] = df['floor_out_of'].replace({'קומת קרקע': '0 out_of', 'קומת מרתף': '-1 out_of'})

    df['floor'] = df['floor_out_of'].str.extract(r'(\d+)')
    df['total_floors'] = df['floor_out_of'].str.extract(r'מתוך (\d+)')

    current_date = datetime.datetime.now()

    def calculate_month_difference(date_str):
        try:
            if isinstance(date_str, datetime.datetime):
                date_str = date_str.strftime('%Y-%m-%d %H:%M')
            date = datetime.datetime.strptime(date_str, '%Y-%m-%d %H:%M')
            month_difference = abs((current_date.year - date.year) * 12 + (current_date.month - date.month))
            if month_difference < 6:
                return 'less_than_6 months'
            elif 6 <= month_difference <= 12:
                return 'months_6_12'
            else:
                return 'above_year'
        except ValueError:
            if date_str == 'גמיש':
                return 'flexible'
            if date_str == 'גמיש ':
                return 'flexible'
            elif date_str == 'לא צויין':
                return 'not_defined'
            elif date_str == 'מיידי':
                return 'less_than_6 months'
            else:
                return date_str
    df['entranceDate '] = df['entranceDate '].apply(lambda x: calculate_month_difference(x))


    cols = ['hasElevator ', 'hasParking ', 'hasBars ', 'hasStorage ', 'hasAirCondition ', 'hasBalcony ', 'hasMamad ', 'handicapFriendly ']
    df[cols] = df[cols].replace({'True': 1, 'False': 0})
    df[cols] = df[cols].apply(lambda x: x.dropna().map(lambda value: 1 if str(value).startswith(('כן', 'יש', 'yes', 'נגיש')) else
                                                      (0 if str(value).startswith(('אין', 'לא', 'no')) else
                                                       value)).astype(int) if x.dtype == 'object' else x)
    df.reset_index(drop=True, inplace=True)

    return df

# excel_file = 'output_all_students_Train_v10.xlsx'
# data = pd.read_excel(excel_file)
# df = prepare_data(data)